
syntax = "proto3";

option csharp_namespace = "GrpcServiceTranscoding";
import "Protos/google/api/annotations.proto";

service Encounters {
  rpc CreateSocialEncounter(SocialEncounterCreate) returns (SocialEncounterResponse) {
    option (google.api.http) = {
      post: "/api/author/social-encounter/create"
      body: "*"
    };
  }

  rpc GetAllEncounters(Empty) returns (ListEncounterResponse) {
    option (google.api.http) = {
      post: "/api/tourist/encountertours/in-range-of"
      body: "position"
    };
  }
}

message PositionAndPages {
    UserPosition position = 1;
    int32 page = 2;
    int32 pageSize = 3;
}

message UserPosition {
    double Range = 1;
    double Longitude = 2;
    double Latitude = 3;
}

message Empty {}

message SocialEncounterCreate {
    string title = 1;
    string description = 2;
    string picture = 3;
    double longitude = 4;
    double latitude = 5;
    double radius = 6;
    int32 xpReward = 7;
    enum EncounterStatus { 
        Active = 0;
        Draft = 1;
        Archived = 2;
    }
    EncounterStatus status = 8;
    int32 peopleNumber = 9;
}

message SocialEncounterResponse {
    string title = 1;
    string description = 2;
    string picture = 3;
    double longitude = 4;
    double latitude = 5;
    double radius = 6;
    int32 xpReward = 7;
    enum EncounterStatus { 
        Active = 0;
        Draft = 1;
        Archived = 2;
    }
    EncounterStatus status = 8;
    int32 peopleNumber = 9;
}

message EncounterResponse {
    int64 id = 1;
    string title = 2;
    string description = 3;
    string picture = 4;
    double longitude = 5;
    double latitude = 6;
    double radius = 7;
    int32 xpReward = 8;
    
    enum EncounterStatus { 
        Active = 0;
        Draft = 1;
        Archived = 2;
    }
    EncounterStatus status = 9;
    
    enum EncounterType { 
        Social = 0;
        Hidden = 1;
        Misc = 2;
        KeyPoint = 3;
    }
    EncounterType type = 10;
}

message ListEncounterResponse {
    repeated EncounterResponse list = 1;
}